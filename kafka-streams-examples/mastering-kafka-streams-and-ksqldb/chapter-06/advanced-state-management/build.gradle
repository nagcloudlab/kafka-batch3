plugins {
  id 'application'

  // https://plugins.gradle.org/plugin/com.github.sherter.google-java-format
  id 'com.github.sherter.google-java-format' version '0.8'

  // https://plugins.gradle.org/plugin/net.ltgt.errorprone
  id 'net.ltgt.errorprone' version '0.6.1'
}

ext {
  // https://search.maven.org/artifact/org.apache.kafka/kafka-streams
  kafkaVersion = '2.7.0'
}

application {
  mainClassName = 'com.magicalpipelines.TombstoneExample'
}

repositories {
  mavenCentral()
}



dependencies {
  implementation "org.apache.kafka:kafka-streams:${kafkaVersion}"

  // logging
  implementation 'org.slf4j:slf4j-api:1.7.3'
  implementation 'ch.qos.logback:logback-classic:1.2.3'

  errorprone 'com.google.errorprone:error_prone_core:2.3.2'
  errorproneJavac 'com.google.errorprone:javac:9+181-r4173-1'
}

tasks.withType(JavaCompile).configureEach { javaCompile ->
  javaCompile.dependsOn 'googleJavaFormat'
  options.compilerArgs << "-Xlint:deprecation"
  options.encoding = 'UTF-8'
  options.errorprone {
    disableWarningsInGeneratedCode = true
    excludedPaths = '.*/build/generated/.*'
  }
}

task runLruFixedSizedStoreExample(type: JavaExec) {
  main = 'com.magicalpipelines.LruFixedSizedStoreExample'
  classpath = sourceSets.main.runtimeClasspath
}

task runTombstoneExample(type: JavaExec) {
  main = 'com.magicalpipelines.TombstoneExample'
  classpath = sourceSets.main.runtimeClasspath
}

task runTopicConfigsExample(type: JavaExec) {
  main = 'com.magicalpipelines.TopicConfigsExample'
  classpath = sourceSets.main.runtimeClasspath
}
